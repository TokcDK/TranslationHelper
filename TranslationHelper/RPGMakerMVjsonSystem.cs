//https://app.quicktype.io/#l=cs&r=json2csharp
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var purpleSystem = PurpleSystem.FromJson(jsonString);
using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TranslationHelper
{

    public partial class RPGMakerMVjsonSystem
    {
        [JsonProperty("airship")]
        public Airship Airship { get; set; }

        [JsonProperty("armorTypes")]
        public string[] ArmorTypes { get; set; }

        [JsonProperty("attackMotions")]
        public AttackMotion[] AttackMotions { get; set; }

        [JsonProperty("battleBgm")]
        public BattleBgm BattleBgm { get; set; }

        [JsonProperty("battleback1Name")]
        public string Battleback1Name { get; set; }

        [JsonProperty("battleback2Name")]
        public string Battleback2Name { get; set; }

        [JsonProperty("battlerHue")]
        public long BattlerHue { get; set; }

        [JsonProperty("battlerName")]
        public string BattlerName { get; set; }

        [JsonProperty("boat")]
        public Airship Boat { get; set; }

        [JsonProperty("currencyUnit")]
        public string CurrencyUnit { get; set; }

        [JsonProperty("defeatMe")]
        public BattleBgm DefeatMe { get; set; }

        [JsonProperty("editMapId")]
        public long EditMapId { get; set; }

        [JsonProperty("elements")]
        public string[] Elements { get; set; }

        [JsonProperty("equipTypes")]
        public string[] EquipTypes { get; set; }

        [JsonProperty("gameTitle")]
        public string GameTitle { get; set; }

        [JsonProperty("gameoverMe")]
        public BattleBgm GameoverMe { get; set; }

        [JsonProperty("locale")]
        public string Locale { get; set; }

        [JsonProperty("magicSkills")]
        public long[] MagicSkills { get; set; }

        [JsonProperty("menuCommands")]
        public bool[] MenuCommands { get; set; }

        [JsonProperty("optDisplayTp")]
        public bool OptDisplayTp { get; set; }

        [JsonProperty("optDrawTitle")]
        public bool OptDrawTitle { get; set; }

        [JsonProperty("optExtraExp")]
        public bool OptExtraExp { get; set; }

        [JsonProperty("optFloorDeath")]
        public bool OptFloorDeath { get; set; }

        [JsonProperty("optFollowers")]
        public bool OptFollowers { get; set; }

        [JsonProperty("optSideView")]
        public bool OptSideView { get; set; }

        [JsonProperty("optSlipDeath")]
        public bool OptSlipDeath { get; set; }

        [JsonProperty("optTransparent")]
        public bool OptTransparent { get; set; }

        [JsonProperty("partyMembers")]
        public long[] PartyMembers { get; set; }

        [JsonProperty("ship")]
        public Airship Ship { get; set; }

        [JsonProperty("skillTypes")]
        public string[] skillTypes { get; set; }

        [JsonProperty("sounds")]
        public BattleBgm[] Sounds { get; set; }

        [JsonProperty("startMapId")]
        public long StartMapId { get; set; }

        [JsonProperty("startX")]
        public long StartX { get; set; }

        [JsonProperty("startY")]
        public long StartY { get; set; }

        [JsonProperty("switches")]
        public string[] Switches { get; set; }

        [JsonProperty("terms")]
        public Terms Terms { get; set; }

        [JsonProperty("testBattlers")]
        public TestBattler[] TestBattlers { get; set; }

        [JsonProperty("testTroopId")]
        public long TestTroopId { get; set; }

        [JsonProperty("title1Name")]
        public string Title1Name { get; set; }

        [JsonProperty("title2Name")]
        public string Title2Name { get; set; }

        [JsonProperty("titleBgm")]
        public BattleBgm TitleBgm { get; set; }

        [JsonProperty("variables")]
        public string[] Variables { get; set; }

        [JsonProperty("versionId")]
        public long VersionId { get; set; }

        [JsonProperty("victoryMe")]
        public BattleBgm VictoryMe { get; set; }

        [JsonProperty("weaponTypes")]
        public string[] WeaponTypes { get; set; }

        [JsonProperty("windowTone")]
        public long[] WindowTone { get; set; }
    }

    public partial class Airship
    {
        [JsonProperty("bgm")]
        public BattleBgm Bgm { get; set; }

        [JsonProperty("characterIndex")]
        public long CharacterIndex { get; set; }

        [JsonProperty("characterName")]
        public string CharacterName { get; set; }

        [JsonProperty("startMapId")]
        public long StartMapId { get; set; }

        [JsonProperty("startX")]
        public long StartX { get; set; }

        [JsonProperty("startY")]
        public long StartY { get; set; }
    }

    public partial class BattleBgm
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("pan")]
        public long Pan { get; set; }

        [JsonProperty("pitch")]
        public long Pitch { get; set; }

        [JsonProperty("volume")]
        public long Volume { get; set; }
    }

    public partial class AttackMotion
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("weaponImageId")]
        public long WeaponImageId { get; set; }
    }

    public partial class Terms
    {
        [JsonProperty("basic")]
        public string[] Basic { get; set; }

        [JsonProperty("commands")]
        public string[] Commands { get; set; }

        [JsonProperty("params")]
        public string[] Params { get; set; }

        [JsonProperty("messages")]
        public Dictionary<string, string> Messages { get; set; }
    }

    public partial class TestBattler
    {
        [JsonProperty("actorId")]
        public long ActorId { get; set; }

        [JsonProperty("equips")]
        public long[] Equips { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }
    }

    public partial class RPGMakerMVjsonSystem
    {
        public static RPGMakerMVjsonSystem FromJson(string json) => JsonConvert.DeserializeObject<RPGMakerMVjsonSystem>(json, TranslationHelper.RPGMakerMVjsonSystemConverter.Settings);
    }

    public static class RPGMakerMVjsonSystemTo
    {
        public static string ToJson(this RPGMakerMVjsonSystem self) => JsonConvert.SerializeObject(self, TranslationHelper.RPGMakerMVjsonSystemConverter.Settings);
    }

    internal static class RPGMakerMVjsonSystemConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
