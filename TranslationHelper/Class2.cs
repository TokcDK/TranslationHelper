// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TranslationHelper;
//
//    var rpgMakerMVjsonArmors = RpgMakerMVjsonArmors.FromJson(jsonString);

namespace RpgMakerMVjsonArmors
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class RpgMakerMVjsonArmors
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("atypeId")]
        public long AtypeId { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("etypeId")]
        public long EtypeId { get; set; }

        [JsonProperty("traits")]
        public List<Trait> Traits { get; set; }

        [JsonProperty("iconIndex")]
        public long IconIndex { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("note")]
        public string Note { get; set; }

        [JsonProperty("params")]
        public List<long> Params { get; set; }

        [JsonProperty("price")]
        public long Price { get; set; }
    }

    public partial class Trait
    {
        [JsonProperty("code")]
        public long Code { get; set; }

        [JsonProperty("dataId")]
        public long DataId { get; set; }

        [JsonProperty("value")]
        public double Value { get; set; }
    }

    public partial class RpgMakerMVjsonArmors
    {
        public static List<RpgMakerMVjsonArmors> FromJson(string json) => JsonConvert.DeserializeObject<List<RpgMakerMVjsonArmors>>(json, global::RpgMakerMVjsonArmors.Converter.Settings);
    }

    public static class RpgMakerMVjsonArmorsTo
    {
        public static string ToJson(this List<RpgMakerMVjsonArmors> self) => JsonConvert.SerializeObject(self, global::RpgMakerMVjsonArmors.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
