///*
//namespace TranslationHelper
//{
//    //Это первый вариант сгенерированных классов через студию
//    //RPGMakerMVjsonCommonEvents
//    public class RPGMakerMVjsonCommonEvents
//    {
//        public int Id { get; set; }
//        public CEList[] List { get; set; }
//        public string Name { get; set; }
//    }

//    public class CEList
//    {
//        public int Code { get; set; }
//        public int Indent { get; set; }
//        public object[] Parameters { get; set; }
//    }
//    //RPGMakerMVjsonCommonEvents
//}
//*/
//// <auto-generated />
////
//// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
////
////    using TranslationHelper;
////
////    var rpgMakerMVjsonCommonEvents = RpgMakerMVjsonCommonEvents.FromJson(jsonString);

//namespace TranslationHelper
//{
//    using System;
//    using System.Collections.Generic;

//    using System.Globalization;
//    using Newtonsoft.Json;
//    using Newtonsoft.Json.Converters;

//    public partial class RpgMakerMVjsonCommonEvents
//    {
//        [JsonProperty("id")]
//        public long Id { get; set; }

//        [JsonProperty("list")]
//        public List<RpgMakerMVjsonCommonEventsList> List { get; set; }

//        [JsonProperty("name")]
//        public string Name { get; set; }

//        [JsonProperty("switchId")]
//        public long SwitchId { get; set; }

//        [JsonProperty("trigger")]
//        public long Trigger { get; set; }
//    }

//    public partial class RpgMakerMVjsonCommonEventsList
//    {
//        [JsonProperty("code")]
//        public long Code { get; set; }

//        [JsonProperty("indent")]
//        public long Indent { get; set; }

//        [JsonProperty("parameters")]
//        public List<RpgMakerMVjsonCommonEventsListParameter> Parameters { get; set; }
//    }

//    public partial class RpgMakerMVjsonCommonEventsListParameterClass
//    {
//        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        [JsonProperty("volume", NullValueHandling = NullValueHandling.Ignore)]
//        public long? Volume { get; set; }

//        [JsonProperty("pitch", NullValueHandling = NullValueHandling.Ignore)]
//        public long? Pitch { get; set; }

//        [JsonProperty("pan", NullValueHandling = NullValueHandling.Ignore)]
//        public long? Pan { get; set; }

//        [JsonProperty("list", NullValueHandling = NullValueHandling.Ignore)]
//        public List<RpgMakerMVjsonCommonEventsParameterList> List { get; set; }

//        [JsonProperty("repeat", NullValueHandling = NullValueHandling.Ignore)]
//        public bool? Repeat { get; set; }

//        [JsonProperty("skippable", NullValueHandling = NullValueHandling.Ignore)]
//        public bool? Skippable { get; set; }

//        [JsonProperty("wait", NullValueHandling = NullValueHandling.Ignore)]
//        public bool? Wait { get; set; }

//        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
//        public long? Code { get; set; }

//        [JsonProperty("parameters", NullValueHandling = NullValueHandling.Ignore)]
//        public List<RpgMakerMVjsonCommonEventsListParameterParameterUnion> Parameters { get; set; }

//        [JsonProperty("indent", NullValueHandling = NullValueHandling.Ignore)]
//        public object Indent { get; set; }
//    }

//    public partial class RpgMakerMVjsonCommonEventsParameterList
//    {
//        [JsonProperty("code")]
//        public long Code { get; set; }

//        [JsonProperty("parameters", NullValueHandling = NullValueHandling.Ignore)]
//        public List<RpgMakerMVjsonCommonEventsListParameterParameterUnion> Parameters { get; set; }

//        [JsonProperty("indent", NullValueHandling = NullValueHandling.Ignore)]
//        public object Indent { get; set; }
//    }

//    public partial struct RpgMakerMVjsonCommonEventsListParameterParameterUnion
//    {
//        public long? Integer;
//        public string String;

//        public static implicit operator RpgMakerMVjsonCommonEventsListParameterParameterUnion(long Integer) => new RpgMakerMVjsonCommonEventsListParameterParameterUnion { Integer = Integer };
//        public static implicit operator RpgMakerMVjsonCommonEventsListParameterParameterUnion(string String) => new RpgMakerMVjsonCommonEventsListParameterParameterUnion { String = String };
//    }

//    public partial struct RpgMakerMVjsonCommonEventsListParameter
//    {
//        public List<RpgMakerMVjsonCommonEventsListParameterParameterUnion> AnythingArray;
//        public bool? Bool;
//        public long? Integer;
//        public RpgMakerMVjsonCommonEventsListParameterClass ParameterClass;
//        public string String;

//        public static implicit operator RpgMakerMVjsonCommonEventsListParameter(List<RpgMakerMVjsonCommonEventsListParameterParameterUnion> AnythingArray) => new RpgMakerMVjsonCommonEventsListParameter { AnythingArray = AnythingArray };
//        public static implicit operator RpgMakerMVjsonCommonEventsListParameter(bool Bool) => new RpgMakerMVjsonCommonEventsListParameter { Bool = Bool };
//        public static implicit operator RpgMakerMVjsonCommonEventsListParameter(long Integer) => new RpgMakerMVjsonCommonEventsListParameter { Integer = Integer };
//        public static implicit operator RpgMakerMVjsonCommonEventsListParameter(RpgMakerMVjsonCommonEventsListParameterClass ParameterClass) => new RpgMakerMVjsonCommonEventsListParameter { ParameterClass = ParameterClass };
//        public static implicit operator RpgMakerMVjsonCommonEventsListParameter(string String) => new RpgMakerMVjsonCommonEventsListParameter { String = String };
//    }

//    public partial class RpgMakerMVjsonCommonEvents
//    {
//        public static List<RpgMakerMVjsonCommonEvents> FromJson(string json) => JsonConvert.DeserializeObject<List<RpgMakerMVjsonCommonEvents>>(json, TranslationHelper.RpgMakerMVjsonCommonEventsConverter.Settings);
//    }

//    public static class RpgMakerMVjsonCommonEventsTo
//    {
//        public static string ToJson(this List<RpgMakerMVjsonCommonEvents> self) => JsonConvert.SerializeObject(self, TranslationHelper.RpgMakerMVjsonCommonEventsConverter.Settings);
//    }

//    internal static class RpgMakerMVjsonCommonEventsConverter
//    {
//        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
//        {
//            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
//            DateParseHandling = DateParseHandling.None,
//            Converters =
//            {
//                RpgMakerMVjsonCommonEventsListParameterConverter.Singleton,
//                ParameterParameterUnionConverter.Singleton,
//                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
//            },
//        };
//    }

//    internal class RpgMakerMVjsonCommonEventsListParameterConverter : JsonConverter
//    {
//        public override bool CanConvert(Type t) => t == typeof(RpgMakerMVjsonCommonEventsListParameter) || t == typeof(RpgMakerMVjsonCommonEventsListParameter?);

//        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
//        {
//            switch (reader.TokenType)
//            {
//                case JsonToken.Integer:
//                    var integerValue = serializer.Deserialize<long>(reader);
//                    return new RpgMakerMVjsonCommonEventsListParameter { Integer = integerValue };
//                case JsonToken.Boolean:
//                    var boolValue = serializer.Deserialize<bool>(reader);
//                    return new RpgMakerMVjsonCommonEventsListParameter { Bool = boolValue };
//                case JsonToken.String:
//                case JsonToken.Date:
//                    var stringValue = serializer.Deserialize<string>(reader);
//                    return new RpgMakerMVjsonCommonEventsListParameter { String = stringValue };
//                case JsonToken.StartObject:
//                    var objectValue = serializer.Deserialize<RpgMakerMVjsonCommonEventsListParameterClass>(reader);
//                    return new RpgMakerMVjsonCommonEventsListParameter { ParameterClass = objectValue };
//                case JsonToken.StartArray:
//                    var arrayValue = serializer.Deserialize<List<RpgMakerMVjsonCommonEventsListParameterParameterUnion>>(reader);
//                    return new RpgMakerMVjsonCommonEventsListParameter { AnythingArray = arrayValue };
//            }
//            throw new Exception("Cannot unmarshal type ListParameter");
//        }

//        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
//        {
//            var value = (RpgMakerMVjsonCommonEventsListParameter)untypedValue;
//            if (value.Integer != null)
//            {
//                serializer.Serialize(writer, value.Integer.Value);
//                return;
//            }
//            if (value.Bool != null)
//            {
//                serializer.Serialize(writer, value.Bool.Value);
//                return;
//            }
//            if (value.String != null)
//            {
//                serializer.Serialize(writer, value.String);
//                return;
//            }
//            if (value.AnythingArray != null)
//            {
//                serializer.Serialize(writer, value.AnythingArray);
//                return;
//            }
//            if (value.ParameterClass != null)
//            {
//                serializer.Serialize(writer, value.ParameterClass);
//                return;
//            }
//            throw new Exception("Cannot marshal type ListParameter");
//        }

//        public static readonly RpgMakerMVjsonCommonEventsListParameterConverter Singleton = new RpgMakerMVjsonCommonEventsListParameterConverter();
//    }

//    internal class ParameterParameterUnionConverter : JsonConverter
//    {
//        public override bool CanConvert(Type t) => t == typeof(RpgMakerMVjsonCommonEventsListParameterParameterUnion) || t == typeof(RpgMakerMVjsonCommonEventsListParameterParameterUnion?);

//        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
//        {
//            switch (reader.TokenType)
//            {
//                case JsonToken.Integer:
//                    var integerValue = serializer.Deserialize<long>(reader);
//                    return new RpgMakerMVjsonCommonEventsListParameterParameterUnion { Integer = integerValue };
//                case JsonToken.String:
//                case JsonToken.Date:
//                    var stringValue = serializer.Deserialize<string>(reader);
//                    return new RpgMakerMVjsonCommonEventsListParameterParameterUnion { String = stringValue };
//            }
//            throw new Exception("Cannot unmarshal type ParameterParameterUnion");
//        }

//        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
//        {
//            var value = (RpgMakerMVjsonCommonEventsListParameterParameterUnion)untypedValue;
//            if (value.Integer != null)
//            {
//                serializer.Serialize(writer, value.Integer.Value);
//                return;
//            }
//            if (value.String != null)
//            {
//                serializer.Serialize(writer, value.String);
//                return;
//            }
//            throw new Exception("Cannot marshal type ParameterParameterUnion");
//        }

//        public static readonly ParameterParameterUnionConverter Singleton = new ParameterParameterUnionConverter();
//    }
//}




