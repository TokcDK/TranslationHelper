namespace TranslationHelper
{
    //Это первый вариант сгенерированных классов через студию
    //RPGMakerMVjsonCommonEvents
    public class RPGMakerMVjsonCommonEvents
    {
        public int Id { get; set; }
        public CEList[] List { get; set; }
        public string Name { get; set; }
    }

    public class CEList
    {
        public int Code { get; set; }
        public int Indent { get; set; }
        public object[] Parameters { get; set; }
    }
    //RPGMakerMVjsonCommonEvents


    /*Этот автосгенерированный вариант работает некорректно
// <auto-generated />
//https://app.quicktype.io/#l=cs&r=json2csharp
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TranslationHelper;
//
//    var commonEvents = RPGMakerMVjsonCommonEvents.FromJson(jsonString);
using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

    public partial class RPGMakerMVjsonCommonEvents
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("list")]
        public List<CommonEventList> List { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("switchId")]
        public long SwitchId { get; set; }

        [JsonProperty("trigger")]
        public long Trigger { get; set; }
    }

    public partial class CommonEventList
    {
        [JsonProperty("code")]
        public long Code { get; set; }

        [JsonProperty("indent")]
        public long Indent { get; set; }

        [JsonProperty("parameters")]
        public List<IndigoParameter> Parameters { get; set; }
    }

    public partial class PurpleParameter
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("volume", NullValueHandling = NullValueHandling.Ignore)]
        public long? Volume { get; set; }

        [JsonProperty("pitch", NullValueHandling = NullValueHandling.Ignore)]
        public long? Pitch { get; set; }

        [JsonProperty("pan", NullValueHandling = NullValueHandling.Ignore)]
        public long? Pan { get; set; }

        [JsonProperty("list", NullValueHandling = NullValueHandling.Ignore)]
        public List<ParameterList> List { get; set; }

        [JsonProperty("repeat", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Repeat { get; set; }

        [JsonProperty("skippable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Skippable { get; set; }

        [JsonProperty("wait", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Wait { get; set; }

        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public long? Code { get; set; }

        [JsonProperty("indent")]
        public long? Indent { get; set; }

        [JsonProperty("parameters", NullValueHandling = NullValueHandling.Ignore)]
        public List<StickyParameter> Parameters { get; set; }
    }

    public partial class ParameterList
    {
        [JsonProperty("code")]
        public long Code { get; set; }

        [JsonProperty("indent")]
        public long? Indent { get; set; }

        [JsonProperty("parameters", NullValueHandling = NullValueHandling.Ignore)]
        public List<StickyParameter> Parameters { get; set; }
    }

    public partial class FluffyParameter
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("volume")]
        public long Volume { get; set; }

        [JsonProperty("pitch")]
        public long Pitch { get; set; }

        [JsonProperty("pan")]
        public long Pan { get; set; }
    }

    public partial struct TentacledParameter
    {
        public long? Integer;
        public string String;

        public static implicit operator TentacledParameter(long Integer) => new TentacledParameter { Integer = Integer };
        public static implicit operator TentacledParameter(string String) => new TentacledParameter { String = String };
    }

    public partial struct StickyParameter
    {
        public FluffyParameter FluffyParameter;
        public long? Integer;

        public static implicit operator StickyParameter(FluffyParameter FluffyParameter) => new StickyParameter { FluffyParameter = FluffyParameter };
        public static implicit operator StickyParameter(long Integer) => new StickyParameter { Integer = Integer };
    }

    public partial struct IndigoParameter
    {
        public List<TentacledParameter> AnythingArray;
        public bool? Bool;
        public long? Integer;
        public PurpleParameter PurpleParameter;
        public string String;

        public static implicit operator IndigoParameter(List<TentacledParameter> AnythingArray) => new IndigoParameter { AnythingArray = AnythingArray };
        public static implicit operator IndigoParameter(bool Bool) => new IndigoParameter { Bool = Bool };
        public static implicit operator IndigoParameter(long Integer) => new IndigoParameter { Integer = Integer };
        public static implicit operator IndigoParameter(PurpleParameter PurpleParameter) => new IndigoParameter { PurpleParameter = PurpleParameter };
        public static implicit operator IndigoParameter(string String) => new IndigoParameter { String = String };
        public bool IsNull => AnythingArray == null && Bool == null && PurpleParameter == null && Integer == null && String == null;
    }

    public partial class RPGMakerMVjsonCommonEvents
    {
        public static List<RPGMakerMVjsonCommonEvents> FromJson(string json) => JsonConvert.DeserializeObject<List<RPGMakerMVjsonCommonEvents>>(json, TranslationHelper.RPGMakerMVjsonCommonEventsConverter.Settings);
    }

    public static class RPGMakerMVjsonCommonEventsTo
    {
        public static string ToJson(this List<RPGMakerMVjsonCommonEvents> self) => JsonConvert.SerializeObject(self, TranslationHelper.RPGMakerMVjsonCommonEventsConverter.Settings);
    }

    internal static class RPGMakerMVjsonCommonEventsConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                IndigoParameterConverter.Singleton,
                TentacledParameterConverter.Singleton,
                StickyParameterConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class IndigoParameterConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IndigoParameter) || t == typeof(IndigoParameter?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new IndigoParameter { };
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new IndigoParameter { Integer = integerValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new IndigoParameter { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new IndigoParameter { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<PurpleParameter>(reader);
                    return new IndigoParameter { PurpleParameter = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<TentacledParameter>>(reader);
                    return new IndigoParameter { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type IndigoParameter");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (IndigoParameter)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.PurpleParameter != null)
            {
                serializer.Serialize(writer, value.PurpleParameter);
                return;
            }
            throw new Exception("Cannot marshal type IndigoParameter");
        }

        public static readonly IndigoParameterConverter Singleton = new IndigoParameterConverter();
    }

    internal class TentacledParameterConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TentacledParameter) || t == typeof(TentacledParameter?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new TentacledParameter { Integer = integerValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new TentacledParameter { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type TentacledParameter");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (TentacledParameter)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type TentacledParameter");
        }

        public static readonly TentacledParameterConverter Singleton = new TentacledParameterConverter();
    }

    internal class StickyParameterConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(StickyParameter) || t == typeof(StickyParameter?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new StickyParameter { Integer = integerValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<FluffyParameter>(reader);
                    return new StickyParameter { FluffyParameter = objectValue };
            }
            throw new Exception("Cannot unmarshal type StickyParameter");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (StickyParameter)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.FluffyParameter != null)
            {
                serializer.Serialize(writer, value.FluffyParameter);
                return;
            }
            throw new Exception("Cannot marshal type StickyParameter");
        }

        public static readonly StickyParameterConverter Singleton = new StickyParameterConverter();
    }
    */
}
